//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExtWatcher.Client.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileEventArgs", Namespace="http://schemas.datacontract.org/2004/07/ExtWatcher.Common.Contract")]
    [System.SerializableAttribute()]
    public partial class FileEventArgs : System.EventArgs, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.IO.WatcherChangeTypes ChangeTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FolderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.IO.WatcherChangeTypes ChangeType {
            get {
                return this.ChangeTypeField;
            }
            set {
                if ((this.ChangeTypeField.Equals(value) != true)) {
                    this.ChangeTypeField = value;
                    this.RaisePropertyChanged("ChangeType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Folder {
            get {
                return this.FolderField;
            }
            set {
                if ((object.ReferenceEquals(this.FolderField, value) != true)) {
                    this.FolderField = value;
                    this.RaisePropertyChanged("Folder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.INotify", CallbackContract=typeof(ExtWatcher.Client.ServiceReference.INotifyCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface INotify {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotify/Register", ReplyAction="http://tempuri.org/INotify/RegisterResponse")]
        void Register(System.Guid instanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotify/Register", ReplyAction="http://tempuri.org/INotify/RegisterResponse")]
        System.Threading.Tasks.Task RegisterAsync(System.Guid instanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotify/UnRegister", ReplyAction="http://tempuri.org/INotify/UnRegisterResponse")]
        void UnRegister(System.Guid instanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotify/UnRegister", ReplyAction="http://tempuri.org/INotify/UnRegisterResponse")]
        System.Threading.Tasks.Task UnRegisterAsync(System.Guid instanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotify/Start", ReplyAction="http://tempuri.org/INotify/StartResponse")]
        void Start(string folderToMonitor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotify/Start", ReplyAction="http://tempuri.org/INotify/StartResponse")]
        System.Threading.Tasks.Task StartAsync(string folderToMonitor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotify/Stop", ReplyAction="http://tempuri.org/INotify/StopResponse")]
        void Stop(string folderToMonitor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotify/Stop", ReplyAction="http://tempuri.org/INotify/StopResponse")]
        System.Threading.Tasks.Task StopAsync(string folderToMonitor);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotifyCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotify/OnPDFFileCreatedEvent", ReplyAction="http://tempuri.org/INotify/OnPDFFileCreatedEventResponse")]
        void OnPDFFileCreatedEvent(ExtWatcher.Client.ServiceReference.FileEventArgs e);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotifyChannel : ExtWatcher.Client.ServiceReference.INotify, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NotifyClient : System.ServiceModel.DuplexClientBase<ExtWatcher.Client.ServiceReference.INotify>, ExtWatcher.Client.ServiceReference.INotify {
        
        public NotifyClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public NotifyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public NotifyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public NotifyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public NotifyClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Register(System.Guid instanceId) {
            base.Channel.Register(instanceId);
        }
        
        public System.Threading.Tasks.Task RegisterAsync(System.Guid instanceId) {
            return base.Channel.RegisterAsync(instanceId);
        }
        
        public void UnRegister(System.Guid instanceId) {
            base.Channel.UnRegister(instanceId);
        }
        
        public System.Threading.Tasks.Task UnRegisterAsync(System.Guid instanceId) {
            return base.Channel.UnRegisterAsync(instanceId);
        }
        
        public void Start(string folderToMonitor) {
            base.Channel.Start(folderToMonitor);
        }
        
        public System.Threading.Tasks.Task StartAsync(string folderToMonitor) {
            return base.Channel.StartAsync(folderToMonitor);
        }
        
        public void Stop(string folderToMonitor) {
            base.Channel.Stop(folderToMonitor);
        }
        
        public System.Threading.Tasks.Task StopAsync(string folderToMonitor) {
            return base.Channel.StopAsync(folderToMonitor);
        }
    }
}
